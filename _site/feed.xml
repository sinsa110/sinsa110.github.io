<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Ten thousand hours to explore the power of data science.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 14 Apr 2018 21:37:04 +0800</pubDate>
    <lastBuildDate>Sat, 14 Apr 2018 21:37:04 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>pandas dataframe 中的 explode 函数</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#code&quot; id=&quot;markdown-toc-code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#description&quot; id=&quot;markdown-toc-description&quot;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;在使用 pandas 进行数据分析的过程中，我们常常会遇到将一行数据展开成多行的需求，多么希望能有一个类似于 hive sql 中的 explode 函数。这个函数如下：&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# !/usr/bin/env python
# -*- coding:utf-8 -*-
# create on 18/4/13
import pandas as pd


def dataframe_explode(dataframe, fieldname): 
    temp_fieldname = fieldname + '_made_tuple_' 
    dataframe[temp_fieldname] = dataframe[fieldname].apply(tuple)       
    list_of_dataframes = []
    for values in dataframe[temp_fieldname].unique().tolist(): 
        list_of_dataframes.append(pd.DataFrame({
            temp_fieldname: [values] * len(values), 
            fieldname: list(values), 
        }))
    dataframe = dataframe[list(set(dataframe.columns) - set([fieldname]))].merge(pd.concat(list_of_dataframes), how='left', on=temp_fieldname) 
    del dataframe[temp_fieldname]
    return dataframe


df = pd.DataFrame({'listcol':[[1,2,3],[4,5,6]], &quot;aa&quot;: [222,333]})
df = dataframe_explode(df, &quot;listcol&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;将 dataframe 按照某一指定列进行展开，使得原来的每一行展开成一行或多行。( 注：该列可迭代， 例如list, tuple, set)&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Apr 2018 01:08:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/13/pandas-dataframe-%E4%B8%AD%E7%9A%84-explode-%E5%87%BD%E6%95%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/13/pandas-dataframe-%E4%B8%AD%E7%9A%84-explode-%E5%87%BD%E6%95%B0/</guid>
        
        <category>pandas;dataframe;explode</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Python3.x 和 Python2.x 的主要区别</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1性能&quot; id=&quot;markdown-toc-1性能&quot;&gt;1.性能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2编码&quot; id=&quot;markdown-toc-2编码&quot;&gt;2.编码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-语法&quot; id=&quot;markdown-toc-3-语法&quot;&gt;3. 语法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-字符串和字节串&quot; id=&quot;markdown-toc-4-字符串和字节串&quot;&gt;4. 字符串和字节串&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5数据类型&quot; id=&quot;markdown-toc-5数据类型&quot;&gt;5.数据类型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6面向对象&quot; id=&quot;markdown-toc-6面向对象&quot;&gt;6.面向对象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7异常&quot; id=&quot;markdown-toc-7异常&quot;&gt;7.异常&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8模块变动&quot; id=&quot;markdown-toc-8模块变动&quot;&gt;8.模块变动&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9其它&quot; id=&quot;markdown-toc-9其它&quot;&gt;9.其它&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1性能&quot;&gt;1.性能&lt;/h2&gt;
&lt;p&gt;Py3.0 运行 pystone benchmark 的速度比 Py2.5 慢 30%。Guido 认为 Py3.0 有极大的优化空间，在字符串和整形操作上可以取得很好的优化结果。Py3.1 性能比 Py2.5 慢 15%，还有很大的提升空间。&lt;/p&gt;

&lt;h2 id=&quot;2编码&quot;&gt;2.编码&lt;/h2&gt;
&lt;p&gt;Py3.X源码文件默认使用 utf-8 编码，这就使得以下代码是合法的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; 中国 = 'china' 
    &amp;gt;&amp;gt;&amp;gt;print(中国) 
    china 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-语法&quot;&gt;3. 语法&lt;/h2&gt;
&lt;p&gt;1）去除了 &amp;lt;&amp;gt;，全部改用 !=&lt;/p&gt;

&lt;p&gt;2）去除``，全部改用 repr()&lt;/p&gt;

&lt;p&gt;3）关键词加入 as 和 with，还有 True, False, None&lt;/p&gt;

&lt;p&gt;4）整型除法返回浮点数，要得到整型结果，请使用 //&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python 2.4.2以前

   10/3      结果为 3     

python 3.0

   10 / 3 结果为 3.3333333333333335

   10 // 3 结果为 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5）加入 nonlocal 语句。使用 noclocal x 可以直接指派外围（非全局）变量&lt;/p&gt;

&lt;p&gt;6）去除 print 语句，加入 print() 函数实现相同的功能。同样的还有 exec 语句，已经改为 exec() 函数，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     2.X: print &quot;The answer is&quot;, 2*2 
     3.X: print(&quot;The answer is&quot;, 2*2) 
     2.X: print x,                              # 使用逗号结尾禁止换行 
     3.X: print(x, end=&quot; &quot;)                     # 使用空格代替换行 
     2.X: print                                 # 输出新行 
     3.X: print()                               # 输出新行 
     2.X: print &amp;gt;&amp;gt;sys.stderr, &quot;fatal error&quot; 
     3.X: print(&quot;fatal error&quot;, file=sys.stderr) 
     2.X: print (x, y)                          # 输出repr((x, y)) 
     3.X: print((x, y))                         # 不同于print(x, y)!
     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7）改变了顺序操作符的行为，例如 x&amp;lt;y，当 x 和 y 类型不匹配时抛出 TypeError 而不是返回随即的 bool 值&lt;/p&gt;

&lt;p&gt;8）输入函数改变了，删除了raw_input，用 input 代替，Python3 中 input 得到的为 str ；Python2 的 input 的到的为 int 型，Python2 的 raw_input 得到的为 str 类型&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Python 2
&amp;gt;&amp;gt;&amp;gt; my_input = input('enter a number: ')
enter a number: 123

&amp;gt;&amp;gt;&amp;gt; type(my_input)
&amp;lt;type 'int'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; my_input = raw_input('enter a number: ')
enter a number: 123

&amp;gt;&amp;gt;&amp;gt; type(my_input)
&amp;lt;type 'str'&amp;gt;


Python 3
&amp;gt;&amp;gt;&amp;gt; my_input = input('enter a number: ')

enter a number: 123

&amp;gt;&amp;gt;&amp;gt; type(my_input)
&amp;lt;class 'str'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;9）去除元组参数解包。不能 def(a, (b, c)):pass 这样定义函数了&lt;/p&gt;

&lt;p&gt;10）新式的 8 进制字变量，相应地修改了 oct() 函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   2.X的方式如下： 
     &amp;gt;&amp;gt;&amp;gt; 0666 
     438 
     &amp;gt;&amp;gt;&amp;gt; oct(438) 
     '0666' 
   3.X这样： 
     &amp;gt;&amp;gt;&amp;gt; 0666 
     SyntaxError: invalid token (&amp;lt;pyshell#63&amp;gt;, line 1) 
     &amp;gt;&amp;gt;&amp;gt; 0o666 
     438 
     &amp;gt;&amp;gt;&amp;gt; oct(438) 
     '0o666' 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;11）增加了 2 进制字面量和 bin() 函数 
    »&amp;gt; bin(438) 
    ‘0b110110110’ 
    »&amp;gt; _438 = ‘0b110110110’ 
    »&amp;gt; _438 
    ‘0b110110110’&lt;/p&gt;

&lt;p&gt;12）支持class decorator。用法与函数decorator一样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; def foo(cls_a): 
          def print_func(self): 
             print('Hello, world!') 
          cls_a.print = print_func 
          return cls_a 
    &amp;gt;&amp;gt;&amp;gt; @foo 
    class C(object): 
      pass 
    &amp;gt;&amp;gt;&amp;gt; C().print() 
    Hello, world! 
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-字符串和字节串&quot;&gt;4. 字符串和字节串&lt;/h2&gt;
&lt;p&gt;1）现在字符串只有str一种类型，但它跟2.x版本的unicode几乎一样。&lt;/p&gt;

&lt;p&gt;2）关于字节串，请参阅“数据类型”的第2条目&lt;/p&gt;

&lt;p&gt;3)&lt;/p&gt;

&lt;h2 id=&quot;5数据类型&quot;&gt;5.数据类型&lt;/h2&gt;

&lt;p&gt;1）Py3.X 去除了 long 类型，现在只有一种整型—— int ，但它的行为就像 2.X 版本的 long&lt;/p&gt;

&lt;p&gt;2）新增了 bytes 类型，对应于 2.X 版本的八位串，定义一个 bytes 字面量的方法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; b = b'china' 
    &amp;gt;&amp;gt;&amp;gt; type(b) 
    &amp;lt;type 'bytes'&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bytes序列，一但形成，其内容是不可变的 ( 字节数组是可变的 )&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s=&quot;ABCD&quot;
b=s.encode(&quot;gbk&quot;)
print b[0]       # 显示   65
b[0] = 66   # 执行该句，出现异常: 'bytes' object does not support item assignment

a = bytearray(   10 )
a[0] = 25    # 可以用赋值语句更改其元素，但所赋的值必须在 0 ~ 255 之间
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;str 对象和 bytes 对象可以使用 .encode() (str -&amp;gt; bytes) or .decode() (bytes -&amp;gt; str) 方法相互转化。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; s = b.decode() 
    &amp;gt;&amp;gt;&amp;gt; s 
    'china' 
    &amp;gt;&amp;gt;&amp;gt; b1 = s.encode() 
    &amp;gt;&amp;gt;&amp;gt; b1 
    b'china' 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于在 python 3.0中字符串以 unicode 编码存储，当写入二进制文件时，字符串无法直接写入（或读取），必须以某种方式的编码为字节序列后，方可写入。&lt;/p&gt;

&lt;p&gt;3）dict 的 .keys()、.items 和 .values() 方法返回迭代器，而之前的 iterkeys() 等函数都被废弃。同时去掉的还有 dict.has_key()，用 in 替代它&lt;/p&gt;

&lt;h2 id=&quot;6面向对象&quot;&gt;6.面向对象&lt;/h2&gt;

&lt;p&gt;1）引入抽象基类（Abstraact Base Classes，ABCs）。&lt;/p&gt;

&lt;p&gt;2）容器类和迭代器类被ABCs化，所以cellections模块里的类型比Py2.5多了很多。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; import collections 
    &amp;gt;&amp;gt;&amp;gt; print('\n'.join(dir(collections))) 
    Callable 
    Container 
    Hashable 
    ItemsView 
    Iterable 
    Iterator 
    KeysView 
    Mapping 
    MappingView 
    MutableMapping 
    MutableSequence 
    MutableSet 
    NamedTuple 
    Sequence 
    Set 
    Sized 
    ValuesView 
    __all__ 
    __builtins__ 
    __doc__ 
    __file__ 
    __name__ 
    _abcoll 
    _itemgetter 
    _sys 
    defaultdict 
    deque 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外，数值类型也被 ABCs 化。关于这两点，请参阅 PEP 3119和PEP 3141。&lt;/p&gt;

&lt;p&gt;3）迭代器的 next() 方法改名为__next__()，并增加内置函数 next()，用以调用迭代器的 __next__() 方法&lt;/p&gt;

&lt;p&gt;4）增加了 @abstractmethod 和 @abstractproperty 两个 decorator，编写抽象方法（属性）更加方便。&lt;/p&gt;

&lt;h2 id=&quot;7异常&quot;&gt;7.异常&lt;/h2&gt;

&lt;p&gt;1）所以异常都从 BaseException继承，并删除了StardardError&lt;/p&gt;

&lt;p&gt;2）去除了异常类的序列行为和.message属性&lt;/p&gt;

&lt;p&gt;3）用 raise Exception(args)代替 raise Exception, args语法&lt;/p&gt;

&lt;p&gt;4）捕获异常的语法改变，引入了as关键字来标识异常实例，在Py2.5中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; try: 
    ...    raise NotImplementedError('Error') 
    ... except NotImplementedError, error:

    ...    print error.message 
    ... 
    Error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在Py3.0中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; try: 
          raise NotImplementedError('Error') 
        except NotImplementedError as error: #注意这个 as 
          print(str(error)) 
    Error 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5）异常链，因为__context__在3.0a1版本中没有实现&lt;/p&gt;

&lt;h2 id=&quot;8模块变动&quot;&gt;8.模块变动&lt;/h2&gt;

&lt;p&gt;1）移除了cPickle模块，可以使用pickle模块代替。最终我们将会有一个透明高效的模块。&lt;/p&gt;

&lt;p&gt;2）移除了imageop模块&lt;/p&gt;

&lt;p&gt;3）移除了 audiodev, Bastion, bsddb185, exceptions, linuxaudiodev, md5, MimeWriter, mimify, popen2,&lt;br /&gt;
rexec, sets, sha, stringold, strop, sunaudiodev, timing和xmllib模块&lt;/p&gt;

&lt;p&gt;4）移除了bsddb模块(单独发布，可以从http://www.jcea.es/programacion/pybsddb.htm获取)&lt;/p&gt;

&lt;p&gt;5）移除了new模块&lt;/p&gt;

&lt;p&gt;6）os.tmpnam()和os.tmpfile()函数被移动到tmpfile模块下&lt;/p&gt;

&lt;p&gt;7）tokenize模块现在使用bytes工作。主要的入口点不再是generate_tokens，而是 tokenize.tokenize()&lt;/p&gt;

&lt;h2 id=&quot;9其它&quot;&gt;9.其它&lt;/h2&gt;
&lt;p&gt;1）在 Python 3 中，range() 是像 xrange() 那样实现以至于一个专门的 xrange() 函数都不再存在（在 Python 3 中xrange() 会抛出命名异常）。
在 Python 2 中 xrange() 创建迭代对象的用法是非常流行的。比如： for 循环或者是列表/集合/字典推导式。这个表现十分像生成器（比如。“惰性求值”）。但是这个 xrange-iterable 是无穷的，意味着你可以无限遍历。由于它的惰性求值，如果你不得仅仅不遍历它一次，xrange() 函数 比 range() 更快（比如 for 循环）。尽管如此，对比迭代一次，不建议你重复迭代多次，因为生成器每次都从头开始。&lt;/p&gt;

&lt;p&gt;2）bytes 对象不能 hash，也不支持 b.lower()、b.strip() 和 b.split() 方法，但对于后两者可以使用 b.strip(b’\n\t\r \f’) 和 b.split(b’ ‘) 来达到相同目的&lt;/p&gt;

&lt;p&gt;3）zip()、map() 和 filter() 都返回迭代器。而 apply()、callable()、coerce()、execfile()、reduce() 和 reload() 函数都被去除了。
现在可以使用 hasattr() 来替换 callable(). hasattr() 的语法如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hasattr(string, '__name__')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4）string.letters 和相关的 .lowercase 和 .uppercase 被去除，请改用 string.ascii_letters 等&lt;/p&gt;

&lt;p&gt;5）如果 x &amp;lt; y 的不能比较，抛出 TypeError 异常。2.x版本是返回伪随机布尔值的&lt;/p&gt;

&lt;p&gt;6）__getslice__系列成员被废弃。a[i:j]根据上下文转换为&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a.__getitem__(slice(I, j))或 __setitem__和 
__delitem__调用 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7）file 类被废弃，在Py2.5中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; file 
    &amp;lt;type 'file'&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在Py3.X中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; file 
    Traceback (most recent call last): 
    File &quot;&amp;lt;pyshell#120&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt; 
       file 
    NameError: name 'file' is not defined
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/codingmylife/archive/2010/06/06/1752807.html&quot;&gt; http://www.cnblogs.com/codingmylife/archive/2010/06/06/1752807.html
&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/hanggegege/p/5840005.html&quot;&gt; https://www.cnblogs.com/hanggegege/p/5840005.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 09 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/09/Python3.x%E5%92%8CPython2.x%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/09/Python3.x%E5%92%8CPython2.x%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB/</guid>
        
        <category>python</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>再见 2017</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#前言&quot; id=&quot;markdown-toc-前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#工作&quot; id=&quot;markdown-toc-工作&quot;&gt;工作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#生活&quot; id=&quot;markdown-toc-生活&quot;&gt;生活&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;2017 年，过的真快，快得我都没来得及思考 2017 的目标是啥，然后就这么过去了。
虽然日子过的这么快，自己无感知，但静下心来回想过去的 2017，还是发生了很多事情。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;工作&quot;&gt;工作&lt;/h2&gt;

&lt;p&gt;2017 年，一直在变。公司在飞速发展，我的 leader 也在不断更换。开始是黄老板，后来是伟哥，虚线汇报给 侃侃，后来是烈哥。伴随着这些，我所在的小组名称也是一直在变化。伴随着小组名字更换，我要学着和每一位 leader 磨合，不同的 leader 有不同的风格，有结果导向型的、有过程导向型的、也有未知导向型的（一会像结果导向型、一会像过程导向型）。我是一个结果导向型的，能切实有效地解决问题的方法应大力支持的。我很努力去拥抱变化，不断去适应新的环境，但有的环境，不是很努力很努力就能适应的。&lt;/p&gt;

&lt;p&gt;2017 年，最开心的工作时光就是和黑产没日没夜对抗的那段日子。那段日子里，我是算法，挖掘黑产特质，识别变异；我是策略运营，使用各种规则给黑产挖坑；我是产品运营，上班第一件事情就是看为黑产定制的监控系统情况，补漏的同时，也得意洋洋地欣赏战果。有时会为自己挖掘出的有效的特征激动不已，有时会给自己设计的跨事件延时反馈策略和“打晕”策略打 call，有时也会为黑产的反反垃圾技术手段惊叹。强大的黑产之所以强大，装备上：有资源丰富的 IP 池、操控千台设备的群控系统、取之不尽的微信号、用之不竭的手机号( 开始是虚假号吗，后来是流量卡号，后来的我们还没识别出来 )，战略上：“反反垃圾，唯真不破”（对应地，我们的打晕策略的战略是：“反垃圾，偶尔参假”）。这场战争还在持续，还没有最终胜负（大战几个月后，黑产消停了两个月，然后又来了）。非常感激这些强大的对手，使得我们的产品功能也更加强大、更加健全，模型/策略更加鲁棒，防控效果得到了客户的认可。我自身也学习到了许多书本上没有的东西。&lt;/p&gt;

&lt;p&gt;2017 年，在不断地拥抱变化和对抗黑产的过程中，自身也成长了不少。变化中认识到自身不足，对抗中知道了战场前线。&lt;/p&gt;

&lt;h2 id=&quot;生活&quot;&gt;生活&lt;/h2&gt;
&lt;p&gt;2017 年，具有深远影响的两件事：一是买了套房，二是老爸车祸，一喜一忧。&lt;/p&gt;

&lt;p&gt;3 月份，抱着随便看看的心态，相中了一套二手房，西边套，采光好，学区房，地铁口。然后在朋友们的帮助下，买下了。6 月份就搬进来了。国庆期间接全家人住了几天，一起过中秋节。&lt;/p&gt;

&lt;p&gt;10 月 7 号，老爸从杭州回去上班的第一天，在下班的路上发生了车祸，两个轮子的被四个轮子的撞飞。抢救及时，老爸昏迷了一周后慢慢好转。11 月 18 日，南方突然降温，快出院的老爸给我们发了一段微信，告诉我们 他听不见声音了。这一消息，让我的内心世界都冷了。&lt;/p&gt;

&lt;p&gt;虽然是一喜一忧，但过程都一样不容易。&lt;/p&gt;

&lt;p&gt;搬进新房子后，每天上下班需要两个小时，慢慢地也就养成了在公交车上听书习惯，听新闻、听中医、听书、听逻辑思维等，听完了《黄帝内经》、《腾讯传》、《人类简史》、《围城》等，《逻辑思维》和《8点1氪》几乎是一期不落，这里墙裂推荐 1.5X 和 2X 语速听，倍速听，不仅能节约时间，还能使自己更加专注。&lt;/p&gt;

&lt;p&gt;工作的第三个年头，开始慢慢沉淀知识，平时大量阅读，定期回顾整理。记录工具推荐：印象笔记&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;2017，过的比较充实。&lt;/p&gt;

&lt;p&gt;2018，继续加油，做到更好。&lt;/p&gt;

</description>
        <pubDate>Sun, 14 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/14/goodbye-to-my-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/14/goodbye-to-my-2017/</guid>
        
        <category>总结</category>
        
        
        <category>time</category>
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>字典树 Trie 结构介绍及其实现</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#概念&quot; id=&quot;markdown-toc-概念&quot;&gt;概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#性质&quot; id=&quot;markdown-toc-性质&quot;&gt;性质&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基本思想&quot; id=&quot;markdown-toc-基本思想&quot;&gt;基本思想&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1插入过程&quot; id=&quot;markdown-toc-1插入过程&quot;&gt;1、插入过程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2查询过程&quot; id=&quot;markdown-toc-2查询过程&quot;&gt;2、查询过程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#应用&quot; id=&quot;markdown-toc-应用&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#优缺点&quot; id=&quot;markdown-toc-优缺点&quot;&gt;优缺点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实现&quot; id=&quot;markdown-toc-实现&quot;&gt;实现&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#python-版&quot; id=&quot;markdown-toc-python-版&quot;&gt;python 版&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Trie，又称前缀树或字典树，是一种有序树状的数据结构，用于保存关联数组，其中的键通常是字符串。&lt;/p&gt;

&lt;h3 id=&quot;性质&quot;&gt;性质&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;根节点不包含字符，除根节点外的每个节点只包含一个字符。&lt;/li&gt;
  &lt;li&gt;从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。&lt;/li&gt;
  &lt;li&gt;每个节点的所有子节点包含的字符串不相同。&lt;/li&gt;
  &lt;li&gt;每个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;基本思想&quot;&gt;基本思想&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;1插入过程&quot;&gt;1、插入过程&lt;/h4&gt;
&lt;p&gt;这里以字母树为例，对于一个单词，从根开始，沿着单词的各个字母所对应的树中的节点分支向下走，直到单词遍历完，将最后的节点标记为红色，表示该单词已插入Trie树。&lt;/p&gt;

&lt;h4 id=&quot;2查询过程&quot;&gt;2、查询过程&lt;/h4&gt;

&lt;p&gt;同样的，从根开始按照单词的字母顺序向下遍历trie树，一旦发现某个节点标记不存在或者单词遍历完成而最后的节点未标记为红色，则表示该单词不存在，若最后的节点标记为红色，表示该单词存在。&lt;/p&gt;

&lt;h3 id=&quot;应用&quot;&gt;应用&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;关键词检索&lt;/li&gt;
  &lt;li&gt;词频统计&lt;/li&gt;
  &lt;li&gt;搜索提示&lt;/li&gt;
  &lt;li&gt;作为辅助结构&lt;/li&gt;
  &lt;li&gt;… …&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;优缺点&quot;&gt;优缺点&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;优点：时间复杂度小。它的插入和查询时间复杂度都为 O(k) ，其中 k 为 key 的长度，与 Trie 中保存了多少个元素无关。&lt;/p&gt;

&lt;p&gt;缺点：空间消耗很高。&lt;/p&gt;

&lt;h3 id=&quot;实现&quot;&gt;实现&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;python-版&quot;&gt;python 版&lt;/h4&gt;

&lt;p&gt;用嵌套字典来实现树结构&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# !/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create on 18/1/4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__author__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'yipu.si'&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s - PID:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(process)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefaultencoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;define Trie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;add words&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;added successfully&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ensure_ascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&quot;&quot;&quot;一举,一举一动,一举成名,一举成名天下知,万能,万能胶&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Trie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_word_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&quot;一举一动&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sinsaSi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.runoob.com/python/att-dictionary-setdefault.html&quot;&gt;Python 字典(Dictionary) setdefault()方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 04 Jan 2018 01:08:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/04/%E5%AD%97%E5%85%B8%E6%A0%91-Trie-%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6-python-%E5%AE%9E%E7%8E%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/04/%E5%AD%97%E5%85%B8%E6%A0%91-Trie-%E7%BB%93%E6%9E%84%E5%8F%8A%E5%85%B6-python-%E5%AE%9E%E7%8E%B0/</guid>
        
        <category>Trie 树</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>如何使用 LessOrMore 这个 Jekyll 模版</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#Thanks&quot; id=&quot;markdown-toc-Thanks&quot;&gt;致谢&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#How-to-use&quot; id=&quot;markdown-toc-How-to-use&quot;&gt;使用&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#Download&quot; id=&quot;markdown-toc-Download&quot;&gt;下载&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#Configuration&quot; id=&quot;markdown-toc-Configuration&quot;&gt;配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#How-to-write-document&quot; id=&quot;markdown-toc-How-to-write-document&quot;&gt;如何写文章&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#execute&quot; id=&quot;markdown-toc-execute&quot;&gt;执行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#result&quot; id=&quot;markdown-toc-result&quot;&gt;效果&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;Thanks&quot;&gt;致谢&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;感谢&lt;a href=&quot;http://lesscss.cn/&quot;&gt;Less官网&lt;/a&gt;的样式，本 Jekyll 框架的样式都是基于 Less 官网的样式直接拷贝过来的。只是重构了 JS，并且加入了Jekyll语法而已。&lt;/li&gt;
  &lt;li&gt;感谢&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;提供的代码维护和发布平台&lt;/li&gt;
  &lt;li&gt;感谢&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;团队做出如此优秀的产品&lt;/li&gt;
  &lt;li&gt;感谢&lt;a href=&quot;https://github.com/mattvh/solar-theme-jekyll&quot;&gt;Solar&lt;/a&gt;的原作者&lt;a href=&quot;http://www.webmaster-source.com/&quot;&gt;Matt Harzewski&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;How-to-use&quot;&gt;使用&lt;/h1&gt;

&lt;h2 id=&quot;Download&quot;&gt;下载&lt;/h2&gt;

&lt;p&gt;使用git从&lt;a href=&quot;https://github.com/luoyan35714/LessOrMore.git&quot;&gt;LessOrMore&lt;/a&gt;主页下载项目&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/luoyan35714/LessOrMore.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;Configuration&quot;&gt;配置&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LessOrMore&lt;/code&gt;项目需要配置的只有一个文件&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;，打开之后按照如下进行配置。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;特别注意&lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;的配置。如果是&lt;code class=&quot;highlighter-rouge&quot;&gt;***.github.io&lt;/code&gt;项目，不修改为空’‘的话，会导致JS,CSS等静态资源无法找到的错误&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: 博客名称
email: 邮箱地址
author: 作者名
url: 个人网站
&lt;span class=&quot;c&quot;&gt;### baseurl修改为项目名，如果项目是'***.github.io'，则设置为空''&lt;/span&gt;
baseurl: &lt;span class=&quot;s2&quot;&gt;&quot;/LessOrMore&quot;&lt;/span&gt;
resume_site: 个人简历网站
github: github地址
github_username: github用户名称
FB:
  comments :
    provider : duoshuo
    duoshuo:
        short_name : 多说账户
    disqus :
        short_name : Disqus账户
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;How-to-write-document&quot;&gt;如何写文章&lt;/h2&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;LessOrMore/_posts&lt;/code&gt;目录下新建一个文件，可以创建文件夹并在文件夹中添加文件，方便维护。在新建文件中粘贴如下信息，并修改以下的&lt;code class=&quot;highlighter-rouge&quot;&gt;titile&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;的相关信息，添加&lt;code class=&quot;highlighter-rouge&quot;&gt;* content {:toc}&lt;/code&gt;为目录相关信息，在进行正文书写前需要在目录和正文之间输入至少2行空行。然后按照正常的Markdown语法书写正文。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
layout: post
&lt;span class=&quot;c&quot;&gt;#标题配置&lt;/span&gt;
title:  标题
&lt;span class=&quot;c&quot;&gt;#时间配置&lt;/span&gt;
date:   2017-12-21 01:08:00 +0800
&lt;span class=&quot;c&quot;&gt;#大类配置&lt;/span&gt;
categories: document
&lt;span class=&quot;c&quot;&gt;#小类配置&lt;/span&gt;
tag: 教程
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; content
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;:toc&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


我是正文。我是正文。我是正文。我是正文。我是正文。我是正文。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;execute&quot;&gt;执行&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;result&quot;&gt;效果&lt;/h2&gt;
&lt;p&gt;打开浏览器并输入URL&lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000/&lt;/code&gt;,回车。&lt;/p&gt;

</description>
        <pubDate>Thu, 21 Dec 2017 01:08:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/21/how-to-use-this-jekyll-theme/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/21/how-to-use-this-jekyll-theme/</guid>
        
        <category>教程</category>
        
        
        <category>document</category>
        
      </item>
    
      <item>
        <title>以此博客纪念工作三周年</title>
        <description>
&lt;p&gt;2014 年 12 月 20 日，开启了我的工作生涯。&lt;/p&gt;

&lt;p&gt;三年过去了，工作之余也整理了一些知识点 ( 见&lt;a href=&quot;http://blog.csdn.net/sinsa110&quot;&gt;csdn blog&lt;/a&gt;)，但不够系统。&lt;/p&gt;

&lt;p&gt;为此搭建此博客，希望自己能够花费更多的时间&lt;strong&gt;去总结，去记录&lt;/strong&gt;工作和生活。&lt;/p&gt;

</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/21/working-3-years/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/21/working-3-years/</guid>
        
        <category>随想</category>
        
        
        <category>document</category>
        
      </item>
    
  </channel>
</rss>
